{"version":3,"sources":["components/Header/Header.jsx","components/Sidebar/Sidebar.jsx","api/api.js","components/EdingTextarea/EdingTextarea.jsx","components/Message/Message.jsx","components/Messages/Messages.jsx","components/Messages/MessagesContainer.jsx","redux/thunk-creators.js","redux/action-creators.js","redux/action-types.js","components/Startpage/Startpage.jsx","components/Main/Main.jsx","components/App.jsx","serviceWorker.js","redux/reducers/chat-reducer.js","redux/store.js","index.js"],"names":["Header","className","Sidebar","to","activeClassName","localStorage","getItem","setItem","JSON","stringify","id","name","time","textMessage","isMy","mesagesAPI","params","parse","messages","push","length","Date","getHours","getMinutes","filter","message","map","EddingTextarea","props","editMessage","setIsEdditingMessage","useState","editingMessage","changeMessage","onChange","target","value","autoFocus","onClick","Message","deleteMessage","isEdditingMessage","EdingTextarea","type","Messages","addMessage","newMessage","setMessage","messagesElements","key","placeholder","chatMessages","compose","connect","state","сhat","dispatch","ADD_MESSAGE_AC","DELETE_MESSAGE_AC","EDIT_MESSAGE_AC","getMessage","SET_MESSAGES_AC","withRouter","match","chat","useEffect","Startpage","Main","exact","path","component","MessagesContainer","App","Boolean","window","location","hostname","initialState","сhatReducer","action","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5cab176f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"main-header\">\r\n      <span className=\"main-header__logo\">Corpnet</span>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <nav className=\"navigation\">\r\n      <ul className=\"navigation__list\">\r\n        <li className=\"navigation__item\">\r\n          <NavLink className=\"navigation__link\" to=\"/common\" activeClassName=\"navigation__link_active\">Общий чат</NavLink>\r\n        </li>\r\n        <li className=\"navigation__item\">\r\n          <NavLink className=\"navigation__link\" to=\"/work\" activeClassName=\"navigation__link_active\">Рабочий чат</NavLink>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Sidebar;\r\n","const workMessages = [\r\n  { id: 0, name: 'Петр Иванов', time: '12 : 31', textMessage: 'Привет!', isMy: false },\r\n  { id: 1, name: 'Петр Иванов', time: '12 : 31', textMessage: 'Это рабочий чат, в котором мы будем обсуждать только рабочие моменты.', isMy: false },\r\n  { id: 2, name: 'Петр Иванов', time: '12 : 31', textMessage: 'Ставь +, если согласен с этим', isMy: false },\r\n];\r\nconst commonMessages = [\r\n  { id: 0, name: 'Петр Иванов', time: '12 : 35', textMessage: 'Привет!', isMy: false },\r\n  { id: 1, name: 'Петр Иванов', time: '12 : 35', textMessage: 'Это это общий чат, в котором мы будем общаться и веселиться во время карантина.', isMy: false },\r\n  { id: 2, name: 'Петр Иванов', time: '12 : 35', textMessage: 'Ставь +, если согласен с этим', isMy: false },\r\n];\r\n\r\nif (!localStorage.getItem('workMessages')) localStorage.setItem('workMessages', JSON.stringify(workMessages));\r\nif (!localStorage.getItem('commonMessages')) localStorage.setItem('commonMessages', JSON.stringify(commonMessages));\r\n\r\nconst mesagesAPI = {\r\n  getMessages: (params) => {\r\n    const messages = JSON.parse(localStorage.getItem(`${params}Messages`));\r\n    return messages;\r\n  },\r\n\r\n  addMessageToLocalStorage: (textMessage, params) => {\r\n    const messages = JSON.parse(localStorage.getItem(`${params}Messages`));\r\n    messages.push({\r\n      id: messages.length,\r\n      name: 'Тимофей Судаков',\r\n      time: `${new Date().getHours()} : ${(new Date().getMinutes() < 10) ? `0${new Date().getMinutes()}` : new Date().getMinutes()}`,\r\n      textMessage: textMessage,\r\n      isMy: true\r\n    })\r\n    localStorage.setItem(`${params}Messages`, JSON.stringify(messages));\r\n  },\r\n\r\n  deleteMessageToLocalStorage: (id, params) => {\r\n    let messages = JSON.parse(localStorage.getItem(`${params}Messages`));\r\n    messages = messages.filter((message) => message.id !== id);\r\n    localStorage.setItem(`${params}Messages`, JSON.stringify(messages));\r\n  },\r\n\r\n  editMessageToLocalStorage: (id, textMessage, params) => {\r\n    let messages = JSON.parse(localStorage.getItem(`${params}Messages`));\r\n    messages = messages.map((message) => {\r\n      if (message.id === id) {\r\n        return {\r\n          ...message,\r\n          textMessage\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    localStorage.setItem(`${params}Messages`, JSON.stringify(messages));\r\n  }\r\n};\r\n\r\nexport {\r\n  mesagesAPI,\r\n}\r\n","import React, { useState } from 'react';\r\n\r\n// Компонента, отображающая режим редактирования сообщения\r\nconst EddingTextarea = props => {\r\n  // Деструктуризируем входящие пропсы\r\n  const { editMessage, setIsEdditingMessage, message, id } = props;\r\n  // Объявляем локальный стэйт, для управления textarea\r\n  const [editingMessage, changeMessage] = useState(message)\r\n\r\n  // Обработчик изменения значения в textarea\r\n  const handlerChangeMessage = ({ target }) => {\r\n    changeMessage(target.value);\r\n  };\r\n\r\n  // Обработчик кнопки редактирования сообщения\r\n  const handlerSetEditMessage = () => {\r\n    if (editingMessage !== '') {\r\n      editMessage(id, editingMessage);\r\n      setIsEdditingMessage(false);\r\n    } else {\r\n      setIsEdditingMessage(false);\r\n    }\r\n  }\r\n\r\n  // Обработчик кнопки закрытия режима редактирования\r\n  const handlerCloseEditMode = () => {\r\n    setIsEdditingMessage(false);\r\n  }\r\n\r\n  // Возвращаем JSX\r\n  return (\r\n    <div className=\"eding-textarea\">\r\n      <div className=\"eding-textarea__eding-controls\">\r\n        <textarea onChange={handlerChangeMessage} value={editingMessage} autoFocus className=\"eding-textarea__textarea\"></textarea>\r\n        <div className=\"eding-textarea__controls\">\r\n          <button onClick={handlerSetEditMessage} className=\"eding-textarea__save-changed\">Изменить</button>\r\n          <button onClick={handlerCloseEditMode} className=\"eding-textarea__close-eding\"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default EddingTextarea;","import React, { useState } from 'react';\r\nimport EdingTextarea from '../EdingTextarea/EdingTextarea';\r\n\r\n// Компонента отображения сообщения\r\nconst Message = props => {\r\n  // Деструктуризируем входящие пропсы\r\n  const { textMessage, deleteMessage, editMessage, id, time, name, isMy } = props;\r\n  // Объявляем локальный стэйт для отображения редактирования сообщения\r\n  const [isEdditingMessage, setIsEdditingMessage] = useState(false);\r\n\r\n  // Обработчик кнопки удаления сообщения\r\n  const deleteHandler = () => {\r\n    deleteMessage(id)\r\n  }\r\n\r\n  // Обработчик кнопки включения режима редактирования сообщения\r\n  const editingMessage = () => {\r\n    setIsEdditingMessage(true);\r\n  }\r\n\r\n  // Возвращаем JSX\r\n  return (\r\n    <div className=\"message\">\r\n      <p className=\"message__name\">{name}</p>\r\n      <span className=\"message__time\">{time}</span>\r\n      {/* Условие, при котором отображается режим редактирования */}\r\n      {isEdditingMessage ? <EdingTextarea\r\n                              setIsEdditingMessage={setIsEdditingMessage}\r\n                              editMessage={editMessage}\r\n                              message={textMessage}\r\n                              id={id}\r\n                            /> :\r\n        <div className=\"message__body\">\r\n          <p className=\"message__text\">{textMessage}</p>\r\n\r\n          {/* Кнопка удаления сообщения и кнопка редактирования отображаются только если это сообщение самого пользователя */}\r\n          {isMy && <button onClick={editingMessage} type=\"button\" className=\"message__edit\"></button>}\r\n          {isMy && <button onClick={deleteHandler} type=\"button\" className=\"message__delete\"></button>}\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message;","import React, { useState } from 'react';\r\nimport Message from '../Message/Message';\r\n\r\n// Компонента, отображающая сообщения\r\nconst Messages = props => {\r\n  // Деструктуризируем входящие пропсы\r\n  const { addMessage, messages, deleteMessage, editMessage } = props;\r\n  // Объявляем локальный стэйт, для контроля textarea\r\n  const [newMessage, setMessage] = useState('');\r\n  // Мапимся по массиву сообщений и возвращаем массив с элементами сообщений\r\n  const messagesElements = messages.map(message => {\r\n    return (\r\n      <li key={message.id} className={`messages__item ${message.isMy && 'messages__item_my-message'}`}>\r\n        <Message\r\n          {...message}\r\n          editMessage={editMessage}\r\n          deleteMessage={deleteMessage}\r\n        />\r\n      </li>\r\n    )\r\n  });\r\n\r\n  // Обработчик события изменения текста в текстовом поле\r\n  const changeMessageTextareaHandler = ({ target }) => {\r\n    setMessage(target.value);\r\n  };\r\n\r\n  // Обработчик кнопки отпавки письма\r\n  const addMessageHandler = () => {\r\n    if (newMessage !== '') {\r\n      addMessage(newMessage);\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  // Возвращаем JSX\r\n  return (\r\n    <div className=\"messages\">\r\n      <ul className=\"messages__list\">\r\n        {messagesElements}\r\n      </ul>\r\n\r\n      <div className=\"messages__send-message\">\r\n        <textarea onChange={changeMessageTextareaHandler} value={newMessage} placeholder=\"Введите текст сообщения\" className=\"messages__textarea\"></textarea>\r\n        <button onClick={addMessageHandler} type=\"button\" className=\"messages__send-button\">Отправить</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addMessage, getMessage, deleteMessage, editMessage } from '../../redux/thunk-creators'\r\nimport Messages from './Messages'; \r\nimport { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nconst MessageContainer = props => {\r\n  // Деструктуризируем входящие пропсы\r\n  const {\r\n    messages,\r\n    match,\r\n    getMessage,\r\n    addMessage,\r\n    editMessage,\r\n    deleteMessage,\r\n  } = props;\r\n  // Параметр из url строки\r\n  const params = match.params.chat;\r\n\r\n  const add = (textMessage) => addMessage(textMessage, params);\r\n  const edit = (id, textMessage) => editMessage(id, textMessage, params);\r\n  const remove = (id) => deleteMessage(id, params);\r\n\r\n  // Определяем метод жизненного цикла\r\n  useEffect(() => getMessage(params), [params]);\r\n\r\n  return (\r\n    <Messages\r\n      messages={messages}\r\n      addMessage={add}\r\n      deleteMessage={remove}\r\n      editMessage={edit}\r\n    />\r\n  )\r\n}\r\n\r\n// Извлекаем данные из стэйта\r\nconst mapStateToProps = state => ({\r\n  // Сообщения\r\n  messages: state.сhat.messages\r\n});\r\n\r\n// Определяем методы, через которые будем диспатчить\r\nconst mapDispatchToProps = dispatch => ({\r\n  // Отправить сообщение\r\n  addMessage: (textMessage, params) => dispatch(addMessage(textMessage, params)),\r\n  // Удалить сообщение\r\n  deleteMessage: (id, params) => dispatch(deleteMessage(id, params)),\r\n  // Редактировать сообщение\r\n  editMessage: (id, textMessage, params) => dispatch(editMessage(id, textMessage, params)),\r\n  // Thunk, которая загружает существующие сообщения в чате\r\n  getMessage: (params) => dispatch(getMessage(params)),\r\n});\r\n\r\nconst chatMessages = compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withRouter\r\n)(MessageContainer)\r\n\r\nexport default chatMessages;","import { mesagesAPI } from \"../api/api\"\r\nimport { SET_MESSAGES_AC, ADD_MESSAGE_AC, DELETE_MESSAGE_AC, EDIT_MESSAGE_AC } from \"./action-creators\";\r\n\r\nconst getMessage = (params) => (dispatch) => {\r\n  const messages = mesagesAPI.getMessages(params);\r\n  dispatch(SET_MESSAGES_AC(messages));\r\n}\r\n\r\nconst addMessage = (textMessage, params) => (dispatch) => {\r\n  mesagesAPI.addMessageToLocalStorage(textMessage, params);\r\n  dispatch(ADD_MESSAGE_AC(textMessage));\r\n}\r\n\r\nconst deleteMessage = (id, params) => (dispatch) => {\r\n  mesagesAPI.deleteMessageToLocalStorage(id, params);\r\n  dispatch(DELETE_MESSAGE_AC(id));\r\n}\r\n\r\nconst editMessage = (id, textMessage, params) => (dispatch) => {\r\n  mesagesAPI.editMessageToLocalStorage(id, textMessage, params);\r\n  dispatch(EDIT_MESSAGE_AC(id, textMessage));\r\n}\r\n\r\nexport {\r\n  getMessage,\r\n  addMessage,\r\n  deleteMessage,\r\n  editMessage,\r\n}","import {\r\n  ADD_MESSAGE, DELETE_MESSAGE, EDIT_MESSAGE, SET_MESSAGES\r\n} from \"./action-types\"\r\n\r\nconst ADD_MESSAGE_AC = (textMessage) => ({ type: ADD_MESSAGE, textMessage });\r\nconst DELETE_MESSAGE_AC = (id) => ({ type: DELETE_MESSAGE, id });\r\nconst EDIT_MESSAGE_AC = (id, textMessage) => ({ type: EDIT_MESSAGE, id, textMessage });\r\nconst SET_MESSAGES_AC = (messages) => ({ type: SET_MESSAGES, messages });\r\n\r\nexport {\r\n  ADD_MESSAGE_AC,\r\n  DELETE_MESSAGE_AC,\r\n  EDIT_MESSAGE_AC,\r\n  SET_MESSAGES_AC,\r\n}","const ADD_MESSAGE = 'ADD_MESSAGE';\r\nconst DELETE_MESSAGE = 'DELETE_MESSAGE';\r\nconst EDIT_MESSAGE = 'EDIT_MESSAGE';\r\nconst SET_MESSAGES = 'SET_MESSAGES';\r\n\r\nexport {\r\n  ADD_MESSAGE,\r\n  DELETE_MESSAGE,\r\n  EDIT_MESSAGE,\r\n  SET_MESSAGES\r\n}","import React from 'react';\r\n\r\nconst Startpage = () => {\r\n  return (\r\n    <div className=\"startpage\">\r\n      <p className=\"startpage__text\">Привет! Выбери чат для общения.</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Startpage;","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport MessagesContainer from '../Messages/MessagesContainer';\r\nimport Startpage from '../Startpage/Startpage';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <HashRouter>\r\n      <main className=\"main\">\r\n        <div className=\"main__container\">\r\n          <div className=\"main__sidebar\">\r\n            <Sidebar />\r\n          </div>\r\n          <div className=\"main__content\">\r\n            <Route exact path=\"/\" component={Startpage} />\r\n            <Route path=\"/:chat\" component={MessagesContainer} />\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </HashRouter>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Header from './Header/Header';\nimport Main from './Main/Main';\n\nconst App = () => {\n  return (\n    <div className=\"corpnet\">\n      <Header />\n      <Main />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  DELETE_MESSAGE,\r\n  ADD_MESSAGE,\r\n  EDIT_MESSAGE,\r\n  SET_MESSAGES,\r\n} from '../action-types'\r\n\r\n// Стартовый стэйт\r\nconst initialState = {\r\n  messages: []\r\n}\r\n\r\n// Редюсер\r\nconst сhatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: [...action.messages]\r\n      }\r\n    case ADD_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          {\r\n            id: state.messages.length,\r\n            name: 'Тимофей Судаков',\r\n            time: `${new Date().getHours()} : ${(new Date().getMinutes() < 10) ? `0${new Date().getMinutes()}` : new Date().getMinutes()}`,\r\n            textMessage: action.textMessage,\r\n            isMy: true\r\n          }\r\n        ]\r\n      }\r\n      case DELETE_MESSAGE:\r\n        return {\r\n          ...state,\r\n          messages: state.messages.filter(message => message.id !== action.id)\r\n        }\r\n      case EDIT_MESSAGE:\r\n        return {\r\n          ...state,\r\n          messages: state.messages.map(message => {\r\n            if (message.id === action.id) return {\r\n              ...message,\r\n              textMessage: action.textMessage\r\n            }\r\n            return message;\r\n          })\r\n        }\r\n      default:\r\n        return state;\r\n  }\r\n}\r\n\r\nexport default сhatReducer;\r\n","import {\r\n  createStore,\r\n  combineReducers,\r\n  applyMiddleware\r\n} from 'redux'\r\nimport сhatReducer from './reducers/chat-reducer';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst reducers = combineReducers({\r\n  сhat: сhatReducer,\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/main.scss';\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}